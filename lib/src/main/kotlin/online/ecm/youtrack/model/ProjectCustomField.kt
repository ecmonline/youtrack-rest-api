/**
 * YouTrack REST API
 *
 * YouTrack issue tracking and project management system
 *
 * The version of the OpenAPI document: 2021.3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package online.ecm.youtrack.model

import online.ecm.youtrack.model.CustomField
import online.ecm.youtrack.model.Project

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo

/**
 * Represents custom field settings for the particular project.
 *
 * @param `field` 
 * @param project 
 * @param canBeEmpty 
 * @param emptyFieldText 
 * @param ordinal 
 * @param isPublic 
 * @param hasRunningJob 
 * @param id 
 * @param dollarType 
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "\$type", visible = true)
@JsonSubTypes(
    JsonSubTypes.Type(value = BuildProjectCustomField::class, name = "BuildProjectCustomField"),
    JsonSubTypes.Type(value = BundleProjectCustomField::class, name = "BundleProjectCustomField"),
    JsonSubTypes.Type(value = EnumProjectCustomField::class, name = "EnumProjectCustomField"),
    JsonSubTypes.Type(value = GroupProjectCustomField::class, name = "GroupProjectCustomField"),
    JsonSubTypes.Type(value = OwnedProjectCustomField::class, name = "OwnedProjectCustomField"),
    JsonSubTypes.Type(value = PeriodProjectCustomField::class, name = "PeriodProjectCustomField"),
    JsonSubTypes.Type(value = SimpleProjectCustomField::class, name = "SimpleProjectCustomField"),
    JsonSubTypes.Type(value = StateProjectCustomField::class, name = "StateProjectCustomField"),
    JsonSubTypes.Type(value = TextProjectCustomField::class, name = "TextProjectCustomField"),
    JsonSubTypes.Type(value = UserProjectCustomField::class, name = "UserProjectCustomField"),
    JsonSubTypes.Type(value = VersionProjectCustomField::class, name = "VersionProjectCustomField")
)
interface ProjectCustomField {

    @get:JsonProperty("field")
    val `field`: CustomField?
    @get:JsonProperty("project")
    val project: Project?
    @get:JsonProperty("canBeEmpty")
    val canBeEmpty: kotlin.Boolean?
    @get:JsonProperty("emptyFieldText")
    val emptyFieldText: kotlin.String?
    @get:JsonProperty("ordinal")
    val ordinal: kotlin.Int?
    @get:JsonProperty("isPublic")
    val isPublic: kotlin.Boolean?
    @get:JsonProperty("hasRunningJob")
    val hasRunningJob: kotlin.Boolean?
    @get:JsonProperty("id")
    val id: kotlin.String?
    @get:JsonProperty("\$type")
    val dollarType: kotlin.String?
}

