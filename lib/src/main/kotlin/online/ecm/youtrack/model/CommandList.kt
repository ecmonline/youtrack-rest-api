/**
 * YouTrack REST API
 *
 * YouTrack issue tracking and project management system
 *
 * The version of the OpenAPI document: 2021.3
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package online.ecm.youtrack.model

import online.ecm.youtrack.model.CommandVisibility
import online.ecm.youtrack.model.Issue
import online.ecm.youtrack.model.ParsedCommand
import online.ecm.youtrack.model.Suggestion

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo

/**
 * Represents list of command and related comment in YouTrack. Can be used to either apply a command or get command suggestions.
 *
 * @param comment 
 * @param visibility 
 * @param query 
 * @param caret 
 * @param silent 
 * @param usesMarkdown 
 * @param runAs 
 * @param commands 
 * @param issues 
 * @param suggestions 
 * @param id 
 * @param dollarType 
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "\$type", visible = true)
@JsonSubTypes(
)
interface CommandList {

    @get:JsonProperty("comment")
    val comment: kotlin.String?
    @get:JsonProperty("visibility")
    val visibility: CommandVisibility?
    @get:JsonProperty("query")
    val query: kotlin.String?
    @get:JsonProperty("caret")
    val caret: kotlin.Int?
    @get:JsonProperty("silent")
    val silent: kotlin.Boolean?
    @get:JsonProperty("usesMarkdown")
    val usesMarkdown: kotlin.Boolean?
    @get:JsonProperty("runAs")
    val runAs: kotlin.String?
    @get:JsonProperty("commands")
    val commands: kotlin.collections.List<ParsedCommand>?
    @get:JsonProperty("issues")
    val issues: kotlin.collections.List<Issue>?
    @get:JsonProperty("suggestions")
    val suggestions: kotlin.collections.List<Suggestion>?
    @get:JsonProperty("id")
    val id: kotlin.String?
    @get:JsonProperty("\$type")
    val dollarType: kotlin.String?
}

